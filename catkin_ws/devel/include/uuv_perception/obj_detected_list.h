// Generated by gencpp from file uuv_perception/obj_detected_list.msg
// DO NOT EDIT!


#ifndef UUV_PERCEPTION_MESSAGE_OBJ_DETECTED_LIST_H
#define UUV_PERCEPTION_MESSAGE_OBJ_DETECTED_LIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuv_perception/obj_detected.h>

namespace uuv_perception
{
template <class ContainerAllocator>
struct obj_detected_list_
{
  typedef obj_detected_list_<ContainerAllocator> Type;

  obj_detected_list_()
    : len(0)
    , objects()  {
    }
  obj_detected_list_(const ContainerAllocator& _alloc)
    : len(0)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _len_type;
  _len_type len;

   typedef std::vector< ::uuv_perception::obj_detected_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::uuv_perception::obj_detected_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::uuv_perception::obj_detected_list_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_perception::obj_detected_list_<ContainerAllocator> const> ConstPtr;

}; // struct obj_detected_list_

typedef ::uuv_perception::obj_detected_list_<std::allocator<void> > obj_detected_list;

typedef boost::shared_ptr< ::uuv_perception::obj_detected_list > obj_detected_listPtr;
typedef boost::shared_ptr< ::uuv_perception::obj_detected_list const> obj_detected_listConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_perception::obj_detected_list_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_perception::obj_detected_list_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_perception::obj_detected_list_<ContainerAllocator1> & lhs, const ::uuv_perception::obj_detected_list_<ContainerAllocator2> & rhs)
{
  return lhs.len == rhs.len &&
    lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_perception::obj_detected_list_<ContainerAllocator1> & lhs, const ::uuv_perception::obj_detected_list_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_perception::obj_detected_list_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_perception::obj_detected_list_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_perception::obj_detected_list_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0af283cd0813ba18e9c1091f872861db";
  }

  static const char* value(const ::uuv_perception::obj_detected_list_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0af283cd0813ba18ULL;
  static const uint64_t static_value2 = 0xe9c1091f872861dbULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_perception/obj_detected_list";
  }

  static const char* value(const ::uuv_perception::obj_detected_list_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 len\n"
"obj_detected[] objects\n"
"\n"
"================================================================================\n"
"MSG: uuv_perception/obj_detected\n"
"int64 x\n"
"int64 y\n"
"int64 w\n"
"int64 h\n"
"string color\n"
"string clase\n"
"float32 X\n"
"float32 Y\n"
;
  }

  static const char* value(const ::uuv_perception::obj_detected_list_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.len);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obj_detected_list_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_perception::obj_detected_list_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_perception::obj_detected_list_<ContainerAllocator>& v)
  {
    s << indent << "len: ";
    Printer<int64_t>::stream(s, indent + "  ", v.len);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::uuv_perception::obj_detected_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PERCEPTION_MESSAGE_OBJ_DETECTED_LIST_H
