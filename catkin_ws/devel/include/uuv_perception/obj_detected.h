// Generated by gencpp from file uuv_perception/obj_detected.msg
// DO NOT EDIT!


#ifndef UUV_PERCEPTION_MESSAGE_OBJ_DETECTED_H
#define UUV_PERCEPTION_MESSAGE_OBJ_DETECTED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_perception
{
template <class ContainerAllocator>
struct obj_detected_
{
  typedef obj_detected_<ContainerAllocator> Type;

  obj_detected_()
    : x(0)
    , y(0)
    , w(0)
    , h(0)
    , color()
    , clase()
    , X(0.0)
    , Y(0.0)  {
    }
  obj_detected_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , w(0)
    , h(0)
    , color(_alloc)
    , clase(_alloc)
    , X(0.0)
    , Y(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _x_type;
  _x_type x;

   typedef int64_t _y_type;
  _y_type y;

   typedef int64_t _w_type;
  _w_type w;

   typedef int64_t _h_type;
  _h_type h;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  _color_type color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _clase_type;
  _clase_type clase;

   typedef float _X_type;
  _X_type X;

   typedef float _Y_type;
  _Y_type Y;





  typedef boost::shared_ptr< ::uuv_perception::obj_detected_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_perception::obj_detected_<ContainerAllocator> const> ConstPtr;

}; // struct obj_detected_

typedef ::uuv_perception::obj_detected_<std::allocator<void> > obj_detected;

typedef boost::shared_ptr< ::uuv_perception::obj_detected > obj_detectedPtr;
typedef boost::shared_ptr< ::uuv_perception::obj_detected const> obj_detectedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_perception::obj_detected_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_perception::obj_detected_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_perception::obj_detected_<ContainerAllocator1> & lhs, const ::uuv_perception::obj_detected_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h &&
    lhs.color == rhs.color &&
    lhs.clase == rhs.clase &&
    lhs.X == rhs.X &&
    lhs.Y == rhs.Y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_perception::obj_detected_<ContainerAllocator1> & lhs, const ::uuv_perception::obj_detected_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uuv_perception::obj_detected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_perception::obj_detected_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_perception::obj_detected_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_perception::obj_detected_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_perception::obj_detected_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_perception::obj_detected_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_perception::obj_detected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da6765af81f6dec4fa013c786451a3ca";
  }

  static const char* value(const ::uuv_perception::obj_detected_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda6765af81f6dec4ULL;
  static const uint64_t static_value2 = 0xfa013c786451a3caULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_perception::obj_detected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_perception/obj_detected";
  }

  static const char* value(const ::uuv_perception::obj_detected_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_perception::obj_detected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 x\n"
"int64 y\n"
"int64 w\n"
"int64 h\n"
"string color\n"
"string clase\n"
"float32 X\n"
"float32 Y\n"
;
  }

  static const char* value(const ::uuv_perception::obj_detected_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_perception::obj_detected_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.color);
      stream.next(m.clase);
      stream.next(m.X);
      stream.next(m.Y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obj_detected_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_perception::obj_detected_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_perception::obj_detected_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<int64_t>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<int64_t>::stream(s, indent + "  ", v.h);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "clase: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.clase);
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_PERCEPTION_MESSAGE_OBJ_DETECTED_H
